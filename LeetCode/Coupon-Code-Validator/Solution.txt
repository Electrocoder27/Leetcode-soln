class Solution {
    private boolean isvalidname(String c) {
            if (c == null || c.isEmpty()) return false;
        for (char ch : c.toCharArray()) {
            if (!(Character.isLetterOrDigit(ch) || ch == '_')) {
                return false; // invalid char found
            }
        }
        return true;
    }
    private boolean isValidBusinessLine(String b) {
        return b.equals("electronics") || b.equals("grocery") || 
               b.equals("pharmacy") || b.equals("restaurant");
    }
    public List<String> validateCoupons(String[] code, String[] businessLine, boolean[] isActive) {
        int n = code.length;
        List<String[]> valid = new ArrayList<>(); 
        for (int i = 0; i < n; i++) {
            if (isActive[i] && isvalidname(code[i]) && isValidBusinessLine(businessLine[i])) {
                valid.add(new String[]{code[i], businessLine[i]});
            }
        }
        Map<String, Integer> order = new HashMap<>();
        order.put("electronics", 0);
        order.put("grocery", 1);
        order.put("pharmacy", 2);
        order.put("restaurant", 3);
        Collections.sort(valid, (a, b) -> {
            int cmp = Integer.compare(order.get(a[1]), order.get(b[1]));
            if (cmp == 0) return a[0].compareTo(b[0]);
            return cmp;
        });
        List<String> ans = new ArrayList<>();
        for (String[] v : valid) {
            ans.add(v[0]);
        }
        return ans;
    }
}